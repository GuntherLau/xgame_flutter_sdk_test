var u=Object.defineProperty;var p=(o,e,n)=>e in o?u(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n;var a=(o,e,n)=>p(o,typeof e!="symbol"?e+"":e,n);import{b2 as m,c as g,r as d}from"./index.sdk-0.0.1.js";let l=[];function i(o){const e=o.connectors;return m(l,e)?l:(l=e,e)}function C(o,e){const{onChange:n}=e;return o._internal.connectors.subscribe((t,s)=>{n(Object.values(t),s)})}function I(o={}){const e=g(o);return d.useSyncExternalStore(n=>C(e,{onChange:n}),()=>i(e),()=>i(e))}const c=class c{constructor(){a(this,"connectors",[])}static getInstance(){return c.instance||(c.instance=new c),c.instance}setWeb3Connector(e){this.connectors=e}getConnector(e){return this.connectors.find(n=>n.id==e)}get wallets(){const e=this.getConnector("metaMaskSDK"),n=this.getConnector("coinbaseWalletSDK"),t=this.getConnector("walletConnect"),s=this.getConnector("com.trustwallet.app");return[{type:"METAMASK",name:"Metamask",logo:"/assets/dummy/metamask.png",connector:e,connectorId:["metaMaskSDK","io.metamask"]},{type:"COINBASE_WALLET",name:"Coinbase",logo:"/assets/dummy/coinbase.png",connector:n??t,connectorId:["coinbaseWalletSDK"]},{type:"WALLET_CONNECT",name:"WalletConnect",logo:"/assets/dummy/wallet-connect.png",connector:t,connectorId:["walletConnect"]},{type:"BITGET_WALLET",name:"Bitget Wallet",logo:"/assets/dummy/bitget-wallet.png",connector:t,connectorId:["walletConnect"]},{type:"TRUST_WALLET",name:"Trust Wallet",logo:"/assets/wallet/trust_wallet.webp",connector:s??t,connectorId:["com.trustwallet.app"]},{type:"BINANCE_WEB3_WALLET",name:"Binance Web3 Wallet",logo:"/assets/wallet/binance.webp",connector:t,connectorId:["walletConnect"]},{type:"OKX_WALLET",name:"Okx Wallet",logo:"/assets/wallet/okx.webp",connector:t,connectorId:["walletConnect"]},{type:"UNISWAP",name:"UniSwap",logo:"/assets/wallet/uniswap.webp",connector:t,connectorId:["walletConnect"]},{type:"BYBIT_WALLET",name:"Bybit Wallet",logo:"/assets/wallet/bybit.webp",connector:t,connectorId:["walletConnect"]},{type:"IMTOKEN",name:"ImToken",logo:"/assets/wallet/im_token.webp",connector:t,connectorId:["walletConnect"]},{type:"TOKEN_POCKET",name:"TokenPocket",logo:"/assets/wallet/token_pocket_wallet.webp",connector:t,connectorId:["walletConnect"]},{type:"LEDGER_LIVE",name:"Ledger Live Wallet",logo:"/assets/wallet/ledger_live.webp",connector:t,connectorId:["walletConnect"]}]}static isAddressBelongToConnector(e,n,t){let s=!1;for(const r of t)r.accounts.includes(e)&&n.id==r.connector.id&&(s=!0);return s}static getAddressOfConnector(e,n){for(const t of n)if(e.includes(t.connector.id))return t.accounts;return[]}};a(c,"instance");let w=c;export{w as W,I as u};
